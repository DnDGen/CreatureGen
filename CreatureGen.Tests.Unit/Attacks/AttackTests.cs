using CreatureGen.Abilities;
using CreatureGen.Attacks;
using NUnit.Framework;

namespace CreatureGen.Tests.Unit.Attacks
{
    [TestFixture]
    public class AttackTests
    {
        private Attack attack;

        [SetUp]
        public void Setup()
        {
            attack = new Attack();
        }

        [Test]
        public void AttackInitialized()
        {
            Assert.That(attack.Damage, Is.Empty);
            Assert.That(attack.IsMelee, Is.False);
            Assert.That(attack.IsNatural, Is.False);
            Assert.That(attack.IsPrimary, Is.False);
            Assert.That(attack.IsSpecial, Is.False);
            Assert.That(attack.Name, Is.Empty);
            Assert.That(attack.TotalAttackBonus, Is.Zero);
            Assert.That(attack.BaseAbility, Is.Null);
            Assert.That(attack.BaseAttackBonus, Is.Zero);
            Assert.That(attack.SizeModifierForAttackBonus, Is.Zero);
            Assert.That(attack.SecondaryAttackModifiers, Is.Zero);
        }

        [TestCase(6, 0, -2, 0)]
        [TestCase(6, 0, -2, -1)]
        [TestCase(6, 0, -2, -2)]
        [TestCase(6, 0, -1, 0)]
        [TestCase(6, 0, -1, -1)]
        [TestCase(6, 0, -1, -2)]
        [TestCase(6, 0, 0, 0)]
        [TestCase(6, 0, 0, -1)]
        [TestCase(6, 0, 0, -2)]
        [TestCase(6, 0, 1, 0)]
        [TestCase(6, 0, 1, -1)]
        [TestCase(6, 0, 1, -2)]
        [TestCase(6, 0, 2, 0)]
        [TestCase(6, 0, 2, -1)]
        [TestCase(6, 0, 2, -2)]
        [TestCase(6, 1, -2, 0)]
        [TestCase(6, 1, -2, -1)]
        [TestCase(6, 1, -2, -2)]
        [TestCase(6, 1, -1, 0)]
        [TestCase(6, 1, -1, -1)]
        [TestCase(6, 1, -1, -2)]
        [TestCase(6, 1, 0, 0)]
        [TestCase(6, 1, 0, -1)]
        [TestCase(6, 1, 0, -2)]
        [TestCase(6, 1, 1, 0)]
        [TestCase(6, 1, 1, -1)]
        [TestCase(6, 1, 1, -2)]
        [TestCase(6, 1, 2, 0)]
        [TestCase(6, 1, 2, -1)]
        [TestCase(6, 1, 2, -2)]
        [TestCase(6, 2, -2, 0)]
        [TestCase(6, 2, -2, -1)]
        [TestCase(6, 2, -2, -2)]
        [TestCase(6, 2, -1, 0)]
        [TestCase(6, 2, -1, -1)]
        [TestCase(6, 2, -1, -2)]
        [TestCase(6, 2, 0, 0)]
        [TestCase(6, 2, 0, -1)]
        [TestCase(6, 2, 0, -2)]
        [TestCase(6, 2, 1, 0)]
        [TestCase(6, 2, 1, -1)]
        [TestCase(6, 2, 1, -2)]
        [TestCase(6, 2, 2, 0)]
        [TestCase(6, 2, 2, -1)]
        [TestCase(6, 2, 2, -2)]
        [TestCase(8, 0, -2, 0)]
        [TestCase(8, 0, -2, -1)]
        [TestCase(8, 0, -2, -2)]
        [TestCase(8, 0, -1, 0)]
        [TestCase(8, 0, -1, -1)]
        [TestCase(8, 0, -1, -2)]
        [TestCase(8, 0, 0, 0)]
        [TestCase(8, 0, 0, -1)]
        [TestCase(8, 0, 0, -2)]
        [TestCase(8, 0, 1, 0)]
        [TestCase(8, 0, 1, -1)]
        [TestCase(8, 0, 1, -2)]
        [TestCase(8, 0, 2, 0)]
        [TestCase(8, 0, 2, -1)]
        [TestCase(8, 0, 2, -2)]
        [TestCase(8, 1, -2, 0)]
        [TestCase(8, 1, -2, -1)]
        [TestCase(8, 1, -2, -2)]
        [TestCase(8, 1, -1, 0)]
        [TestCase(8, 1, -1, -1)]
        [TestCase(8, 1, -1, -2)]
        [TestCase(8, 1, 0, 0)]
        [TestCase(8, 1, 0, -1)]
        [TestCase(8, 1, 0, -2)]
        [TestCase(8, 1, 1, 0)]
        [TestCase(8, 1, 1, -1)]
        [TestCase(8, 1, 1, -2)]
        [TestCase(8, 1, 2, 0)]
        [TestCase(8, 1, 2, -1)]
        [TestCase(8, 1, 2, -2)]
        [TestCase(8, 2, -2, 0)]
        [TestCase(8, 2, -2, -1)]
        [TestCase(8, 2, -2, -2)]
        [TestCase(8, 2, -1, 0)]
        [TestCase(8, 2, -1, -1)]
        [TestCase(8, 2, -1, -2)]
        [TestCase(8, 2, 0, 0)]
        [TestCase(8, 2, 0, -1)]
        [TestCase(8, 2, 0, -2)]
        [TestCase(8, 2, 1, 0)]
        [TestCase(8, 2, 1, -1)]
        [TestCase(8, 2, 1, -2)]
        [TestCase(8, 2, 2, 0)]
        [TestCase(8, 2, 2, -1)]
        [TestCase(8, 2, 2, -2)]
        [TestCase(10, 0, -2, 0)]
        [TestCase(10, 0, -2, -1)]
        [TestCase(10, 0, -2, -2)]
        [TestCase(10, 0, -1, 0)]
        [TestCase(10, 0, -1, -1)]
        [TestCase(10, 0, -1, -2)]
        [TestCase(10, 0, 0, 0)]
        [TestCase(10, 0, 0, -1)]
        [TestCase(10, 0, 0, -2)]
        [TestCase(10, 0, 1, 0)]
        [TestCase(10, 0, 1, -1)]
        [TestCase(10, 0, 1, -2)]
        [TestCase(10, 0, 2, 0)]
        [TestCase(10, 0, 2, -1)]
        [TestCase(10, 0, 2, -2)]
        [TestCase(10, 1, -2, 0)]
        [TestCase(10, 1, -2, -1)]
        [TestCase(10, 1, -2, -2)]
        [TestCase(10, 1, -1, 0)]
        [TestCase(10, 1, -1, -1)]
        [TestCase(10, 1, -1, -2)]
        [TestCase(10, 1, 0, 0)]
        [TestCase(10, 1, 0, -1)]
        [TestCase(10, 1, 0, -2)]
        [TestCase(10, 1, 1, 0)]
        [TestCase(10, 1, 1, -1)]
        [TestCase(10, 1, 1, -2)]
        [TestCase(10, 1, 2, 0)]
        [TestCase(10, 1, 2, -1)]
        [TestCase(10, 1, 2, -2)]
        [TestCase(10, 2, -2, 0)]
        [TestCase(10, 2, -2, -1)]
        [TestCase(10, 2, -2, -2)]
        [TestCase(10, 2, -1, 0)]
        [TestCase(10, 2, -1, -1)]
        [TestCase(10, 2, -1, -2)]
        [TestCase(10, 2, 0, 0)]
        [TestCase(10, 2, 0, -1)]
        [TestCase(10, 2, 0, -2)]
        [TestCase(10, 2, 1, 0)]
        [TestCase(10, 2, 1, -1)]
        [TestCase(10, 2, 1, -2)]
        [TestCase(10, 2, 2, 0)]
        [TestCase(10, 2, 2, -1)]
        [TestCase(10, 2, 2, -2)]
        [TestCase(12, 0, -2, 0)]
        [TestCase(12, 0, -2, -1)]
        [TestCase(12, 0, -2, -2)]
        [TestCase(12, 0, -1, 0)]
        [TestCase(12, 0, -1, -1)]
        [TestCase(12, 0, -1, -2)]
        [TestCase(12, 0, 0, 0)]
        [TestCase(12, 0, 0, -1)]
        [TestCase(12, 0, 0, -2)]
        [TestCase(12, 0, 1, 0)]
        [TestCase(12, 0, 1, -1)]
        [TestCase(12, 0, 1, -2)]
        [TestCase(12, 0, 2, 0)]
        [TestCase(12, 0, 2, -1)]
        [TestCase(12, 0, 2, -2)]
        [TestCase(12, 1, -2, 0)]
        [TestCase(12, 1, -2, -1)]
        [TestCase(12, 1, -2, -2)]
        [TestCase(12, 1, -1, 0)]
        [TestCase(12, 1, -1, -1)]
        [TestCase(12, 1, -1, -2)]
        [TestCase(12, 1, 0, 0)]
        [TestCase(12, 1, 0, -1)]
        [TestCase(12, 1, 0, -2)]
        [TestCase(12, 1, 1, 0)]
        [TestCase(12, 1, 1, -1)]
        [TestCase(12, 1, 1, -2)]
        [TestCase(12, 1, 2, 0)]
        [TestCase(12, 1, 2, -1)]
        [TestCase(12, 1, 2, -2)]
        [TestCase(12, 2, -2, 0)]
        [TestCase(12, 2, -2, -1)]
        [TestCase(12, 2, -2, -2)]
        [TestCase(12, 2, -1, 0)]
        [TestCase(12, 2, -1, -1)]
        [TestCase(12, 2, -1, -2)]
        [TestCase(12, 2, 0, 0)]
        [TestCase(12, 2, 0, -1)]
        [TestCase(12, 2, 0, -2)]
        [TestCase(12, 2, 1, 0)]
        [TestCase(12, 2, 1, -1)]
        [TestCase(12, 2, 1, -2)]
        [TestCase(12, 2, 2, 0)]
        [TestCase(12, 2, 2, -1)]
        [TestCase(12, 2, 2, -2)]
        [TestCase(14, 0, -2, 0)]
        [TestCase(14, 0, -2, -1)]
        [TestCase(14, 0, -2, -2)]
        [TestCase(14, 0, -1, 0)]
        [TestCase(14, 0, -1, -1)]
        [TestCase(14, 0, -1, -2)]
        [TestCase(14, 0, 0, 0)]
        [TestCase(14, 0, 0, -1)]
        [TestCase(14, 0, 0, -2)]
        [TestCase(14, 0, 1, 0)]
        [TestCase(14, 0, 1, -1)]
        [TestCase(14, 0, 1, -2)]
        [TestCase(14, 0, 2, 0)]
        [TestCase(14, 0, 2, -1)]
        [TestCase(14, 0, 2, -2)]
        [TestCase(14, 1, -2, 0)]
        [TestCase(14, 1, -2, -1)]
        [TestCase(14, 1, -2, -2)]
        [TestCase(14, 1, -1, 0)]
        [TestCase(14, 1, -1, -1)]
        [TestCase(14, 1, -1, -2)]
        [TestCase(14, 1, 0, 0)]
        [TestCase(14, 1, 0, -1)]
        [TestCase(14, 1, 0, -2)]
        [TestCase(14, 1, 1, 0)]
        [TestCase(14, 1, 1, -1)]
        [TestCase(14, 1, 1, -2)]
        [TestCase(14, 1, 2, 0)]
        [TestCase(14, 1, 2, -1)]
        [TestCase(14, 1, 2, -2)]
        [TestCase(14, 2, -2, 0)]
        [TestCase(14, 2, -2, -1)]
        [TestCase(14, 2, -2, -2)]
        [TestCase(14, 2, -1, 0)]
        [TestCase(14, 2, -1, -1)]
        [TestCase(14, 2, -1, -2)]
        [TestCase(14, 2, 0, 0)]
        [TestCase(14, 2, 0, -1)]
        [TestCase(14, 2, 0, -2)]
        [TestCase(14, 2, 1, 0)]
        [TestCase(14, 2, 1, -1)]
        [TestCase(14, 2, 1, -2)]
        [TestCase(14, 2, 2, 0)]
        [TestCase(14, 2, 2, -1)]
        [TestCase(14, 2, 2, -2)]
        [TestCase(9266, 90210, 42, 600)]
        [TestCase(1337, 1336, 96, 783)]
        [TestCase(8245, 0, 1, 2)]
        public void TotalAttackBonus(int abilityValue, int attackBonus, int sizeModifier, int secondaryModifier)
        {
            attack.BaseAbility = new Ability("ability");
            attack.BaseAbility.BaseScore = abilityValue;
            attack.BaseAttackBonus = attackBonus;
            attack.SizeModifierForAttackBonus = sizeModifier;
            attack.SecondaryAttackModifiers = secondaryModifier;

            Assert.That(attack.TotalAttackBonus, Is.EqualTo(attackBonus + attack.BaseAbility.Modifier + sizeModifier + secondaryModifier));
        }

        [TestCase(0, -2, 0)]
        [TestCase(0, -2, -1)]
        [TestCase(0, -2, -2)]
        [TestCase(0, -1, 0)]
        [TestCase(0, -1, -1)]
        [TestCase(0, -1, -2)]
        [TestCase(0, 0, 0)]
        [TestCase(0, 0, -1)]
        [TestCase(0, 0, -2)]
        [TestCase(0, 1, 0)]
        [TestCase(0, 1, -1)]
        [TestCase(0, 1, -2)]
        [TestCase(0, 2, 0)]
        [TestCase(0, 2, -1)]
        [TestCase(0, 2, -2)]
        [TestCase(1, -2, 0)]
        [TestCase(1, -2, -1)]
        [TestCase(1, -2, -2)]
        [TestCase(1, -1, 0)]
        [TestCase(1, -1, -1)]
        [TestCase(1, -1, -2)]
        [TestCase(1, 0, 0)]
        [TestCase(1, 0, -1)]
        [TestCase(1, 0, -2)]
        [TestCase(1, 1, 0)]
        [TestCase(1, 1, -1)]
        [TestCase(1, 1, -2)]
        [TestCase(1, 2, 0)]
        [TestCase(1, 2, -1)]
        [TestCase(1, 2, -2)]
        [TestCase(2, -2, 0)]
        [TestCase(2, -2, -1)]
        [TestCase(2, -2, -2)]
        [TestCase(2, -1, 0)]
        [TestCase(2, -1, -1)]
        [TestCase(2, -1, -2)]
        [TestCase(2, 0, 0)]
        [TestCase(2, 0, -1)]
        [TestCase(2, 0, -2)]
        [TestCase(2, 1, 0)]
        [TestCase(2, 1, -1)]
        [TestCase(2, 1, -2)]
        [TestCase(2, 2, 0)]
        [TestCase(2, 2, -1)]
        [TestCase(2, 2, -2)]
        [TestCase(9266, 90210, 42)]
        [TestCase(600, 1337, 1336)]
        [TestCase(96, 783, 8245)]
        public void TotalAttackBonusWithNullAbility(int attackBonus, int sizeModifier, int secondaryModifier)
        {
            attack.BaseAttackBonus = attackBonus;
            attack.SizeModifierForAttackBonus = sizeModifier;
            attack.SecondaryAttackModifiers = secondaryModifier;

            Assert.That(attack.TotalAttackBonus, Is.EqualTo(attackBonus + sizeModifier + secondaryModifier));
        }
    }
}