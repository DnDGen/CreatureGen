using CreatureGen.CharacterClasses;
using CreatureGen.Domain.Tables;
using CreatureGen.Feats;
using NUnit.Framework;
using TreasureGen.Items;

namespace CreatureGen.Tests.Integration.Tables.Feats.Data.CharacterClasses.Classes
{
    [TestFixture]
    public class BardFeatDataTests : CharacterClassFeatDataTests
    {
        protected override string tableName
        {
            get { return string.Format(TableNameConstants.Formattable.Collection.CLASSFeatData, CharacterClassConstants.Bard); }
        }

        [Test]
        public override void CollectionNames()
        {
            var names = new[]
            {
                FeatConstants.SimpleWeaponProficiency,
                FeatConstants.MartialWeaponProficiency + WeaponConstants.Longsword,
                FeatConstants.MartialWeaponProficiency + WeaponConstants.Rapier,
                FeatConstants.MartialWeaponProficiency + WeaponConstants.Sap,
                FeatConstants.MartialWeaponProficiency + WeaponConstants.ShortSword,
                FeatConstants.MartialWeaponProficiency + WeaponConstants.Shortbow,
                FeatConstants.ExoticWeaponProficiency + WeaponConstants.Whip,
                FeatConstants.LightArmorProficiency,
                FeatConstants.ShieldProficiency,
                FeatConstants.BardicMusic + "1",
                FeatConstants.BardicMusic + "2",
                FeatConstants.BardicMusic + "3",
                FeatConstants.BardicMusic + "4",
                FeatConstants.BardicMusic + "5",
                FeatConstants.BardicMusic + "6",
                FeatConstants.BardicMusic + "7",
                FeatConstants.BardicMusic + "8",
                FeatConstants.BardicMusic + "9",
                FeatConstants.BardicMusic + "10",
                FeatConstants.BardicMusic + "11",
                FeatConstants.BardicMusic + "12",
                FeatConstants.BardicMusic + "13",
                FeatConstants.BardicMusic + "14",
                FeatConstants.BardicMusic + "15",
                FeatConstants.BardicMusic + "16",
                FeatConstants.BardicMusic + "17",
                FeatConstants.BardicMusic + "18",
                FeatConstants.BardicMusic + "19",
                FeatConstants.BardicMusic + "20",
                FeatConstants.BardicKnowledge,
                FeatConstants.Countersong,
                FeatConstants.Fascinate,
                FeatConstants.InspireCourage + "1",
                FeatConstants.InspireCourage + "2",
                FeatConstants.InspireCourage + "3",
                FeatConstants.InspireCourage + "4",
                FeatConstants.InspireCompetence,
                FeatConstants.Suggestion,
                FeatConstants.InspireGreatness,
                FeatConstants.SongOfFreedom,
                FeatConstants.InspireHeroics,
                FeatConstants.MassSuggestion
            };

            AssertCollectionNames(names);
        }

        [TestCase(FeatConstants.SimpleWeaponProficiency,
            FeatConstants.SimpleWeaponProficiency,
            FeatConstants.Foci.All,
            0,
            "",
            "",
            1,
            0,
            0,
            "", true)]
        [TestCase(FeatConstants.MartialWeaponProficiency + WeaponConstants.Longsword,
            FeatConstants.MartialWeaponProficiency,
            WeaponConstants.Longsword,
            0,
            "",
            "",
            1,
            0,
            0,
            "", true)]
        [TestCase(FeatConstants.MartialWeaponProficiency + WeaponConstants.Rapier,
            FeatConstants.MartialWeaponProficiency,
            WeaponConstants.Rapier,
            0,
            "",
            "",
            1,
            0,
            0,
            "", true)]
        [TestCase(FeatConstants.MartialWeaponProficiency + WeaponConstants.Sap,
            FeatConstants.MartialWeaponProficiency,
            WeaponConstants.Sap,
            0,
            "",
            "",
            1,
            0,
            0,
            "", true)]
        [TestCase(FeatConstants.MartialWeaponProficiency + WeaponConstants.ShortSword,
            FeatConstants.MartialWeaponProficiency,
            WeaponConstants.ShortSword,
            0,
            "",
            "",
            1,
            0,
            0,
            "", true)]
        [TestCase(FeatConstants.MartialWeaponProficiency + WeaponConstants.Shortbow,
            FeatConstants.MartialWeaponProficiency,
            WeaponConstants.Shortbow,
            0,
            "",
            "",
            1,
            0,
            0,
            "", true)]
        [TestCase(FeatConstants.ExoticWeaponProficiency + WeaponConstants.Whip,
            FeatConstants.ExoticWeaponProficiency,
            WeaponConstants.Whip,
            0,
            "",
            "",
            1,
            0,
            0,
            "", true)]
        [TestCase(FeatConstants.LightArmorProficiency,
            FeatConstants.LightArmorProficiency,
            "",
            0,
            "",
            "",
            1,
            0,
            0,
            "", true)]
        [TestCase(FeatConstants.ShieldProficiency,
            FeatConstants.ShieldProficiency,
            "",
            0,
            "",
            "",
            1,
            0,
            0,
            "", true)]
        [TestCase(FeatConstants.BardicMusic + "1",
            FeatConstants.BardicMusic,
            "",
            1,
            "",
            FeatConstants.Frequencies.Day,
            1,
            1,
            0,
            "", true)]
        [TestCase(FeatConstants.BardicMusic + "2",
            FeatConstants.BardicMusic,
            "",
            2,
            "",
            FeatConstants.Frequencies.Day,
            2,
            2,
            0,
            "", true)]
        [TestCase(FeatConstants.BardicMusic + "3",
            FeatConstants.BardicMusic,
            "",
            3,
            "",
            FeatConstants.Frequencies.Day,
            3,
            3,
            0,
            "", true)]
        [TestCase(FeatConstants.BardicMusic + "4",
            FeatConstants.BardicMusic,
            "",
            4,
            "",
            FeatConstants.Frequencies.Day,
            4,
            4,
            0,
            "", true)]
        [TestCase(FeatConstants.BardicMusic + "5",
            FeatConstants.BardicMusic,
            "",
            5,
            "",
            FeatConstants.Frequencies.Day,
            5,
            5,
            0,
            "", true)]
        [TestCase(FeatConstants.BardicMusic + "6",
            FeatConstants.BardicMusic,
            "",
            6,
            "",
            FeatConstants.Frequencies.Day,
            6,
            6,
            0,
            "", true)]
        [TestCase(FeatConstants.BardicMusic + "7",
            FeatConstants.BardicMusic,
            "",
            7,
            "",
            FeatConstants.Frequencies.Day,
            7,
            7,
            0,
            "", true)]
        [TestCase(FeatConstants.BardicMusic + "8",
            FeatConstants.BardicMusic,
            "",
            8,
            "",
            FeatConstants.Frequencies.Day,
            8,
            8,
            0,
            "", true)]
        [TestCase(FeatConstants.BardicMusic + "9",
            FeatConstants.BardicMusic,
            "",
            9,
            "",
            FeatConstants.Frequencies.Day,
            9,
            9,
            0,
            "", true)]
        [TestCase(FeatConstants.BardicMusic + "10",
            FeatConstants.BardicMusic,
            "",
            10,
            "",
            FeatConstants.Frequencies.Day,
            10,
            10,
            0,
            "", true)]
        [TestCase(FeatConstants.BardicMusic + "11",
            FeatConstants.BardicMusic,
            "",
            11,
            "",
            FeatConstants.Frequencies.Day,
            11,
            11,
            0,
            "", true)]
        [TestCase(FeatConstants.BardicMusic + "12",
            FeatConstants.BardicMusic,
            "",
            12,
            "",
            FeatConstants.Frequencies.Day,
            12,
            12,
            0,
            "", true)]
        [TestCase(FeatConstants.BardicMusic + "13",
            FeatConstants.BardicMusic,
            "",
            13,
            "",
            FeatConstants.Frequencies.Day,
            13,
            13,
            0,
            "", true)]
        [TestCase(FeatConstants.BardicMusic + "14",
            FeatConstants.BardicMusic,
            "",
            14,
            "",
            FeatConstants.Frequencies.Day,
            14,
            14,
            0,
            "", true)]
        [TestCase(FeatConstants.BardicMusic + "15",
            FeatConstants.BardicMusic,
            "",
            15,
            "",
            FeatConstants.Frequencies.Day,
            15,
            15,
            0,
            "", true)]
        [TestCase(FeatConstants.BardicMusic + "16",
            FeatConstants.BardicMusic,
            "",
            16,
            "",
            FeatConstants.Frequencies.Day,
            16,
            16,
            0,
            "", true)]
        [TestCase(FeatConstants.BardicMusic + "17",
            FeatConstants.BardicMusic,
            "",
            17,
            "",
            FeatConstants.Frequencies.Day,
            17,
            17,
            0,
            "", true)]
        [TestCase(FeatConstants.BardicMusic + "18",
            FeatConstants.BardicMusic,
            "",
            18,
            "",
            FeatConstants.Frequencies.Day,
            18,
            18,
            0,
            "", true)]
        [TestCase(FeatConstants.BardicMusic + "19",
            FeatConstants.BardicMusic,
            "",
            19,
            "",
            FeatConstants.Frequencies.Day,
            19,
            19,
            0,
            "", true)]
        [TestCase(FeatConstants.BardicMusic + "20",
            FeatConstants.BardicMusic,
            "",
            20,
            "",
            FeatConstants.Frequencies.Day,
            20,
            0,
            0,
            "", true)]
        [TestCase(FeatConstants.BardicKnowledge,
            FeatConstants.BardicKnowledge,
            "",
            0,
            "",
            "",
            1,
            0,
            0,
            "", true)]
        [TestCase(FeatConstants.Countersong,
            FeatConstants.Countersong,
            "",
            0,
            "",
            "",
            1,
            0,
            0,
            "", true)]
        [TestCase(FeatConstants.Fascinate,
            FeatConstants.Fascinate,
            "",
            0,
            "",
            "",
            1,
            0,
            0,
            "", true)]
        [TestCase(FeatConstants.InspireCourage + "1",
            FeatConstants.InspireCourage,
            "",
            0,
            "",
            "",
            1,
            7,
            1,
            "", true)]
        [TestCase(FeatConstants.InspireCourage + "2",
            FeatConstants.InspireCourage,
            "",
            0,
            "",
            "",
            8,
            13,
            2,
            "", true)]
        [TestCase(FeatConstants.InspireCourage + "3",
            FeatConstants.InspireCourage,
            "",
            0,
            "",
            "",
            14,
            19,
            3,
            "", true)]
        [TestCase(FeatConstants.InspireCourage + "4",
            FeatConstants.InspireCourage,
            "",
            0,
            "",
            "",
            20,
            0,
            4,
            "", true)]
        [TestCase(FeatConstants.InspireCompetence,
            FeatConstants.InspireCompetence,
            "",
            0,
            "",
            "",
            3,
            0,
            0,
            "", true)]
        [TestCase(FeatConstants.Suggestion,
            FeatConstants.Suggestion,
            "",
            0,
            "",
            "",
            6,
            0,
            0,
            "", true)]
        [TestCase(FeatConstants.InspireGreatness,
            FeatConstants.InspireGreatness,
            "",
            0,
            "",
            "",
            9,
            0,
            0,
            "", true)]
        [TestCase(FeatConstants.SongOfFreedom,
            FeatConstants.SongOfFreedom,
            "",
            0,
            "",
            "",
            12,
            0,
            0,
            "", true)]
        [TestCase(FeatConstants.InspireHeroics,
            FeatConstants.InspireHeroics,
            "",
            0,
            "",
            "",
            15,
            0,
            0,
            "", true)]
        [TestCase(FeatConstants.MassSuggestion,
            FeatConstants.MassSuggestion,
            "",
            0,
            "",
            "",
            18,
            0,
            0,
            "", true)]
        public override void ClassFeatData(string name, string feat, string focusType, int frequencyQuantity, string frequencyQuantityStat, string frequencyTimePeriod, int minimumLevel, int maximumLevel, int strength, string sizeRequirement, bool allowFocusOfAll)
        {
            base.ClassFeatData(name, feat, focusType, frequencyQuantity, frequencyQuantityStat, frequencyTimePeriod, minimumLevel, maximumLevel, strength, sizeRequirement, allowFocusOfAll);
        }
    }
}
